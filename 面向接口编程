面向接口编程的理解

优点：

1.程序结构清晰，使用方便

2.接口经过合理设计后，有利于程序设计的规范化，并可以并行开发，提高工作效率

3.实现了程序的可插拔性，对于不同的需求切换不同的实现，降低了耦合度，随着系统复杂性的提高这个优势会越来越明显

4.允许多重实现，弥补了继承的缺陷

缺点：

1.增加了设计的复杂度，不佳的接口的设计会对所有使用接口的层都有影响，并且并不是所有的程序的都需要使用接口，接口只有在系统的复杂性达到一定程度才能体现出它的优势，否则只是纯粹的增加工作量，当然选择接口是不会错的，这需要自己的衡量

2.可能会降低代码的可复用性

3.可能会降低程序的执行效率


接口和继承的选择：

有人问Jams Gosling（Java之父）：“如果你重新构造Java，你想改变什么？”。“我想抛弃 classes”他回答。在笑声平息后，
它解释说，真正的问题不是由于class本身，而是实现继承(extends 关系)。接口继承（implements关系）是更好的。你应该尽可能的
避免实现继承。

实例讲解：
https://blog.csdn.net/qq_20849387/article/details/73881380

Unity还提供面向组件编程：
什么是面向组件编程（Component-Oriented Programming）？ 
组 件不是一个新的概念，Java中的javaBean规范和EJB规范都是典型的组件。组件的特点在于他定义了一种通用的处理方式。例如，JavaBean 拥有内视的特性，这样就可以通过工具来实现JavaBean的可视化。而EJB规范定义了企业服务中的一些特性，使得EJB容器能够为符合EJB规范的代 码增添企业计算所需要的能力，例如事务、持久化、池等。 
所以，组件比起对象来的进步就在于通用的规范的引入。通用规范往往能够为组件添加新的能力（就像上面所讨论的），但也给组件添加了限制，例如你需要实现EJB的一些接口 
COP比OOP更进一步。通常OOP将数据对象组织到实体中。这种方法具有很多优点。但是，OOP有一个大的限制：对象之间的相互依赖关系。去掉这个限制的一个好的想法就是组件。组件和一般对象之间的关键区别是组件是可以替代的。 
